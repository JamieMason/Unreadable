#!/usr/bin/env node

var program = require('commander');
var cleanCSS = require('clean-css');
var uglifyJs = require('uglify-js');
var uglifyParser = uglifyJs.parser;
var uglifyProcessor = uglifyJs.uglify;
var exec = require('child_process').exec;
var casperCommand;
var proc;
var output;

program
  .version('0.0.1')
  .option('-h --help', 'Show this message')
  .option('-u --url [value]', 'URL to process')
  .option('-t --task [value]', 'Task name to perform')
  .parse(process.argv);

casperCommand = 'casperjs "' + __dirname + '/src/js/asterisk.js" --cwd="' + __dirname + '" --url="' + program.url + '" --task="' + program.task + '"';

proc = exec(casperCommand, function(error, stdout, stderr) {

  if(error !== null) {
    throw new Error(error);
  }

  var output = JSON.parse(stdout);

  output.iStyles.forEach(function(lineNumber){
    output.html[lineNumber] = cleanCSS.process(output.html[lineNumber]);
  });

  output.iScripts.forEach(function(lineNumber){
    var ast = uglifyParser.parse(output.html[lineNumber]); // parse code and get the initial AST
    ast = uglifyProcessor.ast_mangle(ast); // get a new AST with mangled names
    ast = uglifyProcessor.ast_squeeze(ast); // get an AST with compression optimizations
    output.html[lineNumber] = uglifyProcessor.gen_code(ast);
  });

  console.log(output.html.join(''));

});
